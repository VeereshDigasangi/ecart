#!/usr/bin/env node
const app = require("../app")
  , logger = require("../config/winston").logger
  , format = require("../config/winston").formatLog

require("dotenv").config();


async function setup() {
  var port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);
  let server = app.listen(app.get("port"), "0.0.0.0", function () {
    logger.info(format("Express server listening on port " + server.address().port));
  });
  server.on("error", onError);


  //  Normalize a port into a number, string, or false.
  function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
      // named pipe
      return val;
    }
    if (port >= 0) {
      // port number
      return port;
    }
    return false;
  }

  //  Event listener for HTTP server "error" event.
  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }
    var bind = typeof port === "string"
      ? "Pipe " + port
      : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
      // console.error(bind + " requires elevated privileges");
      logger.error(format("error", bind + " requires elevated privileges"));
      process.exit(1);
      break;
    case "EADDRINUSE":
      // console.error(bind + " is already in use");
      logger.error(format("error", bind + " is already in use"));
      process.exit(1);
      break;
    default:
      throw error;
    }
  }
}



setup();
